# Структуры данных.
# I. Стек или Очередь LIFO.
# Правильный подход создания структуры данных.
# Нужно написать конкретный use-case для работы данной структуры данных.

_stack = []


def push(x):
    _stack.append(x)


def pop():
    x = _stack.pop()
    return x


def clear():
    _stack.clear()


def is_empty():
    return len(_stack) == 0


if __name__ == "__main__":
    import doctest

    doctest.testmod()

# Проверка корректности скобочной последовательности. (для одного вида скобок,
# для нескольких видов скобок нужно вводить новое правило всегда:
# B = [A] и т.д.)
# Правило 1: любое корректное скобочное выражение взятое в скобки - корректно.
# A = '', B = (A), B - корректно.
# Правило 2: Любые два корркетные скобочные выражения записанные рядом - корректны.
# C = AB, С - корректно.


# Обратная польская нотация. Алгоритм вычисления выражений в постфиксной нотации.
# Пример: [5, 2, +] == 5+2, (2+7)*5 == [2, 7, +, 5, *], 2+7*5 == [2, 7, 5, *, +]
# Если токен - число, то для каждого токена кладём его в стек, а иначе - он операция и мы
# берём из стека два числа, вычисляем результат операции и помещаем обратно в стек.

