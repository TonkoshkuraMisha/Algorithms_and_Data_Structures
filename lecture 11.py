# Динамическое программирование - сведение рекурсий к циклам.


# I. Наибольшая общая подпоследовательность.
# А и В одномерные массивы чисел. len(A) == N, len(B) == M.
# Подпоследовательность - это некий список С, содержащий некоторое количество элементов А
# в исходном порядке.
# Пустая последовательность [] - подпоследовательность любой последовательности.
# Fij - длина наибольшей возможной подпоследовательности частей А и В.
# A[0:i] - часть А.
# В[0:j] - часть В.


def lcs(A, B):
    F = [[0] * (len(B) + 1) for i in range(len(A) + 1)]
    for i in range(1, len(A) + 1):
        for j in range(1, len(B) + 1):
            if A[i - 1] == B[j - 1]:
                F[i][j] = 1 + F[i - 1][j - 1]
            else:
                F[i][j] = max(F[i - 1][j], F[i][j - 1])
    return F[-1][-1]


# example
A = [-2, 3, 5, -7, 12]
B = [3, 3, 5, -7, 13]

# выводит длину наибольшей подпоследовательности двух списков А и В.
print(lcs(A, B))


# II. Наибольшая возрастающая подпоследовательность.
# Берём А. Сортируем его - это наш новый список В.
# Ищем наибольшую подпоследовательность между А и В.
# Найденная подпоследовательность и будет наибольшей возрастающей подпоследовательностью.

def gis(A):
    F = [0]*(len(A)+1)
    for i in range(1, len(A)+1):
        m = 0
        for j in range(0, i):
            if A[i-1] > A[j] and F[j] > m:
                m = F[j]
        F[i] = m + 1
    return F[len(A)]

# example
A = [11, 2, 5, -7, 12]

print(gis(A))


# III. Алгоритм дискретной укладки рюкзака.
# IV. Алгоритм редакционных изменений == Алгоритм Левенштейна